마른수건짜기
이재성 | 고언어로 API Gateway + Lambda 쉽게 쓰기

* 슬라이드 주소
.link https://slides.hellp.io
.link https://github.com/2rebi/slides 슬라이드 깃헙 주소

* 준비물
.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda Link

* 목차
- 발표 주제 소개
- Golang Lambda 배포 실습
- Golang API Gateway + Lambda 실습
- Golang API Gateway + Lambda 라우팅, 문제점 파악, 문제 해결 여정
- *httplam*, *echolam* 소개

* 발표 주제 소개

* 왜? API Gateway + Lambda를 선택했는가
*!!!!!!MONEY!!!!!*
.image 마른수건짜기/img_money.jpeg 400 566

* API Gateway Pricing

*프리티어* *기간*
매월 무료

- 수신 API 호출 100만 개
- 수신 HTTP 호출 100만 개
- 메시지 100만 개
- 연결 시간 750,000분

*비용*

.html 마른수건짜기/tbl_apigw_pricing.html

* Lambda Pricing
*평생*
매월 무료

- 요청 100만 건

*비용*
.html 마른수건짜기/tbl_lambda_pricing.html


* 기존 서버리스 아키텍처

# .image 마른수건짜기/app_arch_typ1.png 500 554
.image 마른수건짜기/app_arch_typ2.png 500 580

* 기존 서버리스 아키텍쳐의 문제점
- 새로운 기능(피쳐)를 추가하는 데 불편함
- 배포 포인트가 늘어남
- 추후 서버리스를 탈피 하기힘듦(벤더락)

* 해결책
하나의 람다로 관리하자

* 새로운 서버리스 아키텍처

.image 마른수건짜기/app_new_arch.png 112 500

하지만 아직 문제가 남아있다.

* Golang Lambda 실습

* 고언어, 람다 Get Started

[[https://github.com/aws/aws-lambda-go#getting-started][Reference]]

    // main.go
    package main

    import (
        "github.com/aws/aws-lambda-go/lambda"
    )

    func hello() (string, error) {
        return "Hello λ!", nil
    }

    func main() {
        // Make the handler available for Remote Procedure Call by AWS Lambda
        lambda.Start(hello)
    }



* 고언어 람다 핸들러 형태

[[https://docs.aws.amazon.com/lambda/latest/dg/golang-handler.html#golang-handler-structs][Reference]]

    func () 

    func () error 

    func (TIn) error 

    func () (TOut, error) 

    func (context.Context) error 

    func (context.Context, TIn) error 

    func (context.Context) (TOut, error) 

    func (context.Context, TIn) (TOut, error)

    func (context.Context, []byte) ([]byte, error)

* 코드 예제

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/blob/main/1_helloworld/main.go 코드 링크 / 깃헙 주소

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/blob/main/out/1_helloworld.zip [ZIP] 빌드된 결과물 / 깃헙 주소

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/raw/main/out/1_helloworld.zip [ZIP] 빌드된 결과물 / 다운로드

* [실습] 람다 배포 준비

- 고언어가 있는 경우

[[https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/golang-package.html#golang-package-mac-linux][Reference]]

    GOOS=linux CGO_ENABLED=0 GOARCH=amd64 go build -o main main.go

    zip function.zip main

- 도커가 있는 경우

    docker build -t build --output type=local,dest=out .

* [실습] 람다 배포 가이드 사진

.link https://raw.githubusercontent.com/2rebi/slides/main/%EB%A7%88%EB%A5%B8%EC%88%98%EA%B1%B4%EC%A7%9C%EA%B8%B0/%EA%B0%80%EC%9D%B4%EB%93%9C/%EA%B3%A0%EC%96%B8%EC%96%B4%EB%9E%8C%EB%8B%A4%EB%B0%B0%ED%8F%AC%EA%B0%80%EC%9D%B4%EB%93%9C.png 사진 가이드 링크

.link https://github.com/2rebi/slides/blob/main/%EB%A7%88%EB%A5%B8%EC%88%98%EA%B1%B4%EC%A7%9C%EA%B8%B0/%EA%B0%80%EC%9D%B4%EB%93%9C/%EA%B3%A0%EC%96%B8%EC%96%B4%EB%9E%8C%EB%8B%A4%EB%B0%B0%ED%8F%AC%EA%B0%80%EC%9D%B4%EB%93%9C.png 사진 가이드 깃헙 링크

* Golang API Gateway + Lambda 실습

* 코드 예제

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/blob/main/2_apigw_lambda/main.go 코드 링크 / 깃헙 주소

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/blob/main/out/2_apigw_lambda.zip [ZIP] 빌드된 결과물 / 깃헙 주소

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/raw/main/out/2_apigw_lambda.zip [ZIP] 빌드된 결과물 / 다운로드

* [실습] API Gateway 가이드 사진

.link https://raw.githubusercontent.com/2rebi/slides/main/%EB%A7%88%EB%A5%B8%EC%88%98%EA%B1%B4%EC%A7%9C%EA%B8%B0/%EA%B0%80%EC%9D%B4%EB%93%9C/%EC%97%90%EC%9D%B4%ED%94%BC%EC%95%84%EC%9D%B4%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4%EA%B0%80%EC%9D%B4%EB%93%9C.png 사진 가이드 링크

.link https://github.com/2rebi/slides/blob/main/%EB%A7%88%EB%A5%B8%EC%88%98%EA%B1%B4%EC%A7%9C%EA%B8%B0/%EA%B0%80%EC%9D%B4%EB%93%9C/%EC%97%90%EC%9D%B4%ED%94%BC%EC%95%84%EC%9D%B4%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4%EA%B0%80%EC%9D%B4%EB%93%9C.png 사진 가이드 깃헙 링크

* Golang API Gateway + Lambda 라우팅, 문제점 파악, 문제 해결 여정

* 코드 예제

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/blob/main/3_apigw_lambda_route/main.go 코드 링크 / 깃헙 주소

* 일반적인 고 웹 어플리케이션 (net/http)

    package main

    import "net/http"

    func main() {
        m := http.NewServeMux()
        m.HandleFunc("/", func(writer http.ResponseWriter, request *http.Request) {
            writer.WriteHeader(http.StatusOK)
            writer.Header().Set("Content-Type", "application/json")
            writer.Write([]byte(`{"hello": "world"}`))
        })
        m.HandleFunc("/item", func(writer http.ResponseWriter, request *http.Request) {
            writer.WriteHeader(http.StatusOK)
            writer.Header().Set("Content-Type", "application/json")
            writer.Write([]byte(`{"id": 1, "name": "My Item"}`))
        })
        http.ListenAndServe(":3000", m)
    }

* 일반적인 고 웹 어플리케이션 (Echo Framework)

    package main

    import (
        "github.com/labstack/echo/v4"
        "net/http"
    )

    func main() {
        e := echo.New()
        e.GET("/", func(c echo.Context) error {
            return c.JSON(http.StatusOK, echo.Map{
                "hello": "world",
            })
        })
        e.GET("/item", func(c echo.Context) error {
            return c.JSON(http.StatusOK, echo.Map{
                "id":   1,
                "name": "My Item",
            })
        })
        e.Logger.Fatal(e.Start(":1323"))
    }

* Framework 를 만들어보자
- Echo Framework 기능을 포팅해보자
- 람다 환경이 아니여도 실행이 가능해야함
- 람다 환경, 비 람다 환경 동작이 동일해야함

* Golam
[[https://github.com/unsafe-risk/golam][Golam (아카이브 예정)]]

* Golam Example

    package main

    import (
        "github.com/unsafe-risk/golam"
        "net/http"
    )

    type Json map[string]interface{}

    func main() {
        g := golam.New()
        g.GET("/", func(c golam.Context) error {
            return c.JSON(http.StatusOK, Json{
                "hello": "world",
            })
        })
        g.GET("/{param+}", func(c golam.Context) error {
            return c.JSON(http.StatusOK, Json{
                "hello": c.PathParams()["param"],
            })
        })
        g.StartWithLocalAddr(":3000")
    }

* 아카이브 이유
- 만들다 보니 힘들다...
- 기능 언제 다 포팅하냐...
- 기능 추가 하기 귀찮아졌다...
- 혼자하니까 힘들다...

* 대체제
- [[https://github.com/aws-serverless-go/httplam][*httplam*]]
- [[https://github.com/aws-serverless-go/echolam][*echolam*]]

* httplam, echolam 소개

* httplam
- net/http 기반 고 웹 어플리케이션 개발 가능
- 고 표준 라이브러리 호환성
- 람다 환경이 아니여도 실행이 가능해야함
- 람다 환경, 비 람다 환경 동작이 동일해야함

* echolam
- Echo Framework 기반 고 웹 어플리케이션 개발 가능
- HTTP API 개발에 있어 Echo Framework 기능들을 대부분 사용 가능해야함
- 람다 환경이 아니여도 실행이 가능해야함
- 람다 환경, 비 람다 환경 동작이 동일해야함

* httplam 코드 예제

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/blob/main/4_case_http_net/main.go 코드 링크 / 깃헙 주소

* echolam 코드 예제

.link https://github.com/2rebi/221208-awskrug-pangyo-golang-apigw-lambda/blob/main/5_case_echo_framework/main.go 코드 링크 / 깃헙 주소

* 아쉬운 점
- cli 부재
- API Gateway 손으로 라우팅 걸어줘야함
- Lambda 손으로 배포 해줘야함 -> CI/CD 파이프라인 구성으로 해결 가능하긴함
- Response 부분에서 continuous buffer 이다 보니 buffer의 capacity 사이즈를 넘어가는 순간 새로운 slice 생성 및 값 복사에 대한 오버헤드, non-continuous buffer로 대체 필요

기여 환영

[[https://github.com/orgs/aws-serverless-go/repositories][Link]]

* 한계
- 모든 람다의 한계점
- 모든 API Gateway의 한계점
- 느리다..

[[https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/gettingstarted-limits.html][Lambda quotas]]
[[https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/limits.html#http-api-quotas][API Gateway quotas]]